# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-licensing

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-offline
  - serverless-mocha-plugin

provider:
  name: aws
  runtime: nodejs12.x
  apiKeys:
    - sls-licensing-${opt:stage, 'dev'}
  memorySize: 128 # Overwrite the default memory size. Default is 1024
  timeout: 10 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  logRetentionInDays: 7 # Set the default RetentionInDays for a CloudWatch LogGroup


  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev
  region: ${opt:region, 'eu-central-1'} # Overwrite the default region used. Default is eu-central-1
  stackName: sls-licensing-service-${opt:stage, 'dev'} # Use a custom name for the CloudFormation stack
  apiName: sls-licensing-${opt:stage, 'dev'} # Use a custom name for the API Gateway API
  endpointType: regional # Optional endpoint configuration for API Gateway REST API. Default is Edge.
  environment:
    mongo_url: ${env:MONGO_URL, 'mongodb://127.0.0.1:27017/sls-licensing'}
    mongo_url_test: ${env:MONGO_URL_TEST, 'mongodb://127.0.0.1:27017/sls-licensing-test'}

custom:
  serverless-offline:
    host:  ${env:HOST, '0.0.0.0'}
    port:  ${env:PORT, '3000'}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  info:
    handler: handlers/app.info
    events:
      - http:
          path: info
          method: get
          cors: true
  ### KEYS ###
  createKey:
    handler: handlers/licenses.create
    events:
      - http:
          path: licenses
          method: post
          private: true
          cors: true
  queryKeys:
    handler: handlers/licenses.query
    events:
      - http:
          path: licenses
          method: get
          private: true
          cors: true
  findOneKey:
    handler: handlers/licenses.findOne
    events:
      - http:
          path: licenses/{id}
          method: get
          private: true
          cors: true
  updateKey:
    handler: handlers/licenses.update
    events:
      - http:
          method: patch
          path: licenses/{id}
          private: true
          cors: true
  expireKey:
    handler: handlers/licenses.expire
    events:
      - http:
          method: patch
          path: licenses/{id}/expire
          private: true
          cors: true
  deleteKey:
    handler: handlers/licenses.delete
    events:
      - http:
          method: delete
          path: licenses/{id}
          private: true
          cors: true
  activateKey:
    handler: handlers/licenses.activate
    events:
      - http:
          path: licenses/activate/{value}
          method: post
          cors: true
          private: true
  validateKey:
    handler: handlers/licenses.validate
    events:
      - http:
          path: licenses/validate/{value}
          method: post
          cors: true
          private: true
  ### PLANS ###
  createPlan:
    handler: handlers/plans.create
    events:
      - http:
          path: plans
          method: post
          private: true
          cors: true
  bulkInsertPlans:
    handler: handlers/plans.bulkInsert
    events:
      - http:
          path: plans
          method: put
          private: true
          cors: true
  queryPlans:
    handler: handlers/plans.query
    events:
      - http:
          path: plans
          method: get
          private: true
          cors: true
  findOnePlan:
    handler: handlers/plans.findOne
    events:
      - http:
          method: get
          path: plans/{id}
          private: true
          cors: true
  deletePlan:
    handler: handlers/plans.delete
    events:
      - http:
          method: delete
          path: plans/{id}
          private: true
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: hello
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
